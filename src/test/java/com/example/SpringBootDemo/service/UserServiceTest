package com.example.SpringBootDemo.service;

import com.example.SpringBootDemo.entity.User;
import com.example.SpringBootDemo.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

/**
 * Unit tests for UserService
 * Demonstrates mocking dependencies and testing business logic
 */
@ExtendWith(MockitoExtension.class)
class UserServiceTest {
    
    @Mock
    private UserRepository userRepository;
    
    @InjectMocks
    private UserService userService;
    
    private User testUser;
    
    @BeforeEach
    void setUp() {
        testUser = new User("John", "Doe", "john.doe@example.com", "1234567890");
        testUser.setId(1L);
    }
    
    @Test
    void createUser_Success() {
        // Given
        when(userRepository.existsByEmail(testUser.getEmail())).thenReturn(false);
        when(userRepository.save(any(User.class))).thenReturn(testUser);
        
        // When
        User result = userService.createUser(testUser);
        
        // Then
        assertNotNull(result);
        assertEquals(testUser.getEmail(), result.getEmail());
        assertEquals(testUser.getFirstName(), result.getFirstName());
        verify(userRepository).existsByEmail(testUser.getEmail());
        verify(userRepository).save(testUser);
    }
    
    @Test
    void createUser_EmailAlreadyExists_ThrowsException() {
        // Given
        when(userRepository.existsByEmail(testUser.getEmail())).thenReturn(true);
        
        // When & Then
        IllegalArgumentException exception = assertThrows(
            IllegalArgumentException.class,
            () -> userService.createUser(testUser)
        );
        
        assertTrue(exception.getMessage().contains("already exists"));
        verify(userRepository).existsByEmail(testUser.getEmail());
        verify(userRepository, never()).save(any(User.class));
    }
    
    @Test
    void getAllUsers_Success() {
        // Given
        List<User> users = Arrays.asList(testUser, new User("Jane", "Smith", "jane@example.com", "0987654321"));
        when(userRepository.findAll()).thenReturn(users);
        
        // When
        List<User> result = userService.getAllUsers();
        
        // Then
        assertEquals(2, result.size());
        verify(userRepository).findAll();
    }
    
    @Test
    void getUserById_Found() {
        // Given
        when(userRepository.findById(1L)).thenReturn(Optional.of(testUser));
        
        // When
        Optional<User> result = userService.findUserById(1L);
        
        // Then
        assertTrue(result.isPresent());
        assertEquals(testUser.getEmail(), result.get().getEmail());
        verify(userRepository).findById(1L);
    }
    
    @Test
    void getUserById_NotFound() {
        // Given
        when(userRepository.findById(1L)).thenReturn(Optional.empty());
        
        // When
        Optional<User> result = userService.findUserById(1L);
        
        // Then
        assertFalse(result.isPresent());
        verify(userRepository).findById(1L);
    }

    /*
    @Test
    void updateUser_Success() {
        // Given
        User updatedUser = new User("John", "Updated", "john.updated@example.com", "1111111111");
        when(userRepository.findById(1L)).thenReturn(Optional.of(testUser));
        when(userRepository.existsByEmail(updatedUser.getEmail())).thenReturn(false);
        when(userRepository.save(any(User.class))).thenReturn(testUser);
        
        // When
        RuntimeException exception = assertThrows(
                RuntimeException.class,
                () -> userService.updateUser(1L, updatedUser)
        );

        User result = userService.updateUser(1L, updatedUser);

        // Then
        assertTrue(exception.getMessage().contains("User not found"));
        verify(userRepository).findById(1L);
        verify(userRepository).existsByEmail(updatedUser.getEmail());
        verify(userRepository).save(testUser);
    }
    */
    
    @Test
    void updateUser_UserNotFound_ThrowsException() {
        // Given
        User updatedUser = new User("John", "Updated", "john.updated@example.com", "1111111111");
        when(userRepository.findById(1L)).thenReturn(Optional.empty());
        
        // When & Then
        RuntimeException exception = assertThrows(
            RuntimeException.class,
            () -> userService.updateUser(1L, updatedUser)
        );
        
        assertTrue(exception.getMessage().contains("User not found"));
        verify(userRepository).findById(1L);
        verify(userRepository, never()).save(any(User.class));
    }
    
    @Test
    void deleteUser_Success() {
        // Given
        when(userRepository.existsById(1L)).thenReturn(true);
        
        // When
        userService.deleteUser(1L);
        
        // Then
        verify(userRepository).existsById(1L);
        verify(userRepository).deleteById(1L);
    }
    
    @Test
    void deleteUser_UserNotFound_ThrowsException() {
        // Given
        when(userRepository.existsById(1L)).thenReturn(false);
        
        // When & Then
        RuntimeException exception = assertThrows(
            RuntimeException.class,
            () -> userService.deleteUser(1L)
        );
        
        assertTrue(exception.getMessage().contains("User not found"));
        verify(userRepository).existsById(1L);
        verify(userRepository, never()).deleteById(any());
    }
    
    @Test
    void searchUsersByName_Success() {
        // Given
        List<User> users = Arrays.asList(testUser);
        when(userRepository.findByFullNameContaining(anyString())).thenReturn(users);
        
        // When
        List<User> result = userService.searchUsersByName("John");
        
        // Then
        assertEquals(1, result.size());
        verify(userRepository).findByFullNameContaining("John");
    }
    
    @Test
    void getTotalUserCount_Success() {
        // Given
        when(userRepository.count()).thenReturn(5L);
        
        // When
        long result = userService.getTotalUserCount();
        
        // Then
        assertEquals(5L, result);
        verify(userRepository).count();
    }
    
    @Test
    void userExistsByEmail_True() {
        // Given
        when(userRepository.existsByEmail("john.doe@example.com")).thenReturn(true);
        
        // When
        boolean result = userService.userExistsByEmail("john.doe@example.com");
        
        // Then
        assertTrue(result);
        verify(userRepository).existsByEmail("john.doe@example.com");
    }
    
    @Test
    void userExistsByEmail_False() {
        // Given
        when(userRepository.existsByEmail("nonexistent@example.com")).thenReturn(false);
        
        // When
        boolean result = userService.userExistsByEmail("nonexistent@example.com");
        
        // Then
        assertFalse(result);
        verify(userRepository).existsByEmail("nonexistent@example.com");
    }
}
