package com.example.SpringBootDemo.controller;

import com.example.SpringBootDemo.entity.UserRole;
import com.example.SpringBootDemo.security.CustomUserDetails;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

/**
 * Authentication Controller
 * 
 * Handles authentication-related pages and user navigation
 * 
 * @author User Management Team
 * @version 1.0
 */
@Controller
public class AuthController {

    /**
     * Home page - accessible to everyone
     */
    @GetMapping("/")
    public String home(Model model) {
        // Check if user is authenticated
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth != null && auth.isAuthenticated() && !(auth.getPrincipal() instanceof String)) {
            model.addAttribute("authenticated", true);
            model.addAttribute("username", auth.getName());
        } else {
            model.addAttribute("authenticated", false);
        }
        return "home";
    }

    /**
     * Login page
     */
    @GetMapping("/login")
    public String login(@RequestParam(value = "error", required = false) String error,
                       @RequestParam(value = "logout", required = false) String logout,
                       @RequestParam(value = "expired", required = false) String expired,
                       @RequestParam(value = "registered", required = false) String registered,
                       Model model) {
        
        if (error != null) {
            model.addAttribute("error", "Invalid email or password. Please try again.");
        }
        
        if (logout != null) {
            model.addAttribute("message", "You have been logged out successfully!");
        }
        
        if (expired != null) {
            model.addAttribute("error", "Your session has expired. Please login again.");
        }
        
        if (registered != null) {
            model.addAttribute("message", "Registration successful! Please login with your credentials.");
        }
        
        return "login";
    }

    /**
     * Dashboard - requires authentication
     * Redirects users based on their roles
     */
    @GetMapping("/dashboard")
    public String dashboard(Model model) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        
        if (auth != null && auth.getPrincipal() instanceof CustomUserDetails) {
            CustomUserDetails userDetails = (CustomUserDetails) auth.getPrincipal();
            
            model.addAttribute("user", userDetails.toUser());
            model.addAttribute("username", userDetails.getUsername());
            model.addAttribute("fullName", userDetails.getFullName());
            model.addAttribute("role", userDetails.getRole());
            model.addAttribute("authorities", userDetails.getAuthorities());
            
            // Redirect based on user role
            if (userDetails.hasRole("ADMIN")) {
                return "redirect:/admin/dashboard";
            } else if (userDetails.hasRole("MANAGER")) {
                return "redirect:/manager/dashboard";
            } else {
                return "redirect:/user/dashboard";
            }
        }
        
        return "redirect:/login";
    }

    /**
     * Admin Dashboard
     */
    @GetMapping("/admin/dashboard")
    public String adminDashboard(Model model) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        CustomUserDetails userDetails = (CustomUserDetails) auth.getPrincipal();
        
        model.addAttribute("user", userDetails.toUser());
        model.addAttribute("username", userDetails.getUsername());
        model.addAttribute("fullName", userDetails.getFullName());
        model.addAttribute("authorities", userDetails.getAuthorities());
        model.addAttribute("pageTitle", "Admin Dashboard");
        model.addAttribute("welcomeMessage", "Welcome to the Admin Dashboard! You have full system access.");
        
        return "dashboard/admin";
    }

    /**
     * Manager Dashboard
     */
    @GetMapping("/manager/dashboard")
    public String managerDashboard(Model model) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        CustomUserDetails userDetails = (CustomUserDetails) auth.getPrincipal();
        
        model.addAttribute("user", userDetails.toUser());
        model.addAttribute("username", userDetails.getUsername());
        model.addAttribute("fullName", userDetails.getFullName());
        model.addAttribute("authorities", userDetails.getAuthorities());
        model.addAttribute("pageTitle", "Manager Dashboard");
        model.addAttribute("welcomeMessage", "Welcome to the Manager Dashboard! You can manage users and view reports.");
        
        return "dashboard/manager";
    }

    /**
     * User Dashboard
     */
    @GetMapping("/user/dashboard")
    public String userDashboard(Model model) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        CustomUserDetails userDetails = (CustomUserDetails) auth.getPrincipal();
        
        model.addAttribute("user", userDetails.toUser());
        model.addAttribute("username", userDetails.getUsername());
        model.addAttribute("fullName", userDetails.getFullName());
        model.addAttribute("authorities", userDetails.getAuthorities());
        model.addAttribute("pageTitle", "User Dashboard");
        model.addAttribute("welcomeMessage", "Welcome to your Dashboard! You can view your profile and manage your account.");
        
        return "dashboard/user";
    }

    /**
     * User profile page
     */
    @GetMapping("/profile")
    public String profile(Model model) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        CustomUserDetails userDetails = (CustomUserDetails) auth.getPrincipal();
        
        model.addAttribute("user", userDetails.toUser());
        model.addAttribute("userDetails", userDetails);
        
        return "profile";
    }

    /**
     * Access denied page
     */
    @GetMapping("/access-denied")
    public String accessDenied(Model model) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth != null) {
            model.addAttribute("username", auth.getName());
        }
        return "access-denied";
    }
}
