{
	"info": {
		"_postman_id": "comprehensive-spring-boot-collection",
		"name": "SpringBootDemo - Complete API Collection",
		"description": "Complete collection for testing SpringBootDemo and UserManagementApplication. Includes proper authentication to avoid HTML responses. Use Basic Auth: admin@example.com / admin123",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "spring-boot-comprehensive"
	},
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "admin@example.com",
				"type": "string"
			},
			{
				"key": "password",
				"value": "admin123",
				"type": "string"
			}
		]
	},
	"item": [
		{
			"name": "üîê Authentication & Setup",
			"item": [
				{
					"name": "Test Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('User info returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/secure/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"secure",
								"me"
							]
						},
						"description": "Test authentication and get current user info. This should return JSON, not HTML."
					},
					"response": []
				}
			],
			"description": "Authentication testing endpoints"
		},
		{
			"name": "üë• User Management API",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response is array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Get all users. Uses Basic Auth to avoid HTML login page."
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"1"
							]
						},
						"description": "Get user by ID"
					},
					"response": []
				},
				{
					"name": "Create User",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"password123\",\n    \"role\": \"USER\",\n    \"enabled\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Create a new user"
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"John Updated\",\n    \"lastName\": \"Doe Updated\",\n    \"email\": \"john.updated@example.com\",\n    \"role\": \"MANAGER\",\n    \"enabled\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"1"
							]
						},
						"description": "Update existing user"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"1"
							]
						},
						"description": "Delete user by ID"
					},
					"response": []
				},
				{
					"name": "Search Users",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/search?name=admin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"search"
							],
							"query": [
								{
									"key": "name",
									"value": "admin"
								}
							]
						},
						"description": "Search users by name"
					},
					"response": []
				},
				{
					"name": "Get User Statistics",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"stats"
							]
						},
						"description": "Get user statistics"
					},
					"response": []
				}
			],
			"description": "User management CRUD operations"
		},
		{
			"name": "üîí Secure API Endpoints",
			"item": [
				{
					"name": "Get Current User Info",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/secure/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"secure",
								"me"
							]
						},
						"description": "Get current authenticated user information"
					},
					"response": []
				},
				{
					"name": "Admin - Get All Users",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/secure/admin/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"secure",
								"admin",
								"users"
							]
						},
						"description": "Admin only - Get all users with additional metadata"
					},
					"response": []
				},
				{
					"name": "Admin - Get User Statistics",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/secure/admin/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"secure",
								"admin",
								"stats"
							]
						},
						"description": "Admin/Manager only - Get detailed user statistics"
					},
					"response": []
				},
				{
					"name": "Manager Reports",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/secure/manager/reports",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"secure",
								"manager",
								"reports"
							]
						},
						"description": "Manager/Admin only - Get management reports"
					},
					"response": []
				}
			],
			"description": "Role-based secure API endpoints"
		},
		{
			"name": "üóÑÔ∏è Hibernate Testing",
			"item": [
				{
					"name": "Test Hibernate SQL Generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON array', function () {",
									"    pm.response.to.be.json;",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test('Hibernate entities loaded', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('id');",
									"        pm.expect(jsonData[0]).to.have.property('firstName');",
									"        pm.expect(jsonData[0]).to.have.property('email');",
									"    }",
									"});",
									"",
									"console.log('üóÑÔ∏è Hibernate Test: Check application logs for SQL queries generated by Hibernate');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Test Hibernate ORM by fetching all users. Check application logs to see Hibernate-generated SQL queries like 'select user0_.id as id1_0_, user0_.email as email2_0_...'"
					},
					"response": []
				},
				{
					"name": "Test Hibernate Entity Persistence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Hibernate persisted entity', function () {",
									"    pm.response.to.be.json;",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"    pm.expect(jsonData.firstName).to.equal('Hibernate');",
									"    pm.expect(jsonData.lastName).to.equal('Test');",
									"});",
									"",
									"// Save the created user ID for cleanup",
									"if (pm.response.code === 201) {",
									"    const user = pm.response.json();",
									"    pm.globals.set('hibernate_test_user_id', user.id);",
									"}",
									"",
									"console.log('üóÑÔ∏è Hibernate Test: Check logs for INSERT statement generated by Hibernate');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Hibernate\",\n    \"lastName\": \"Test\",\n    \"email\": \"hibernate.test@example.com\",\n    \"password\": \"hibernate123\",\n    \"role\": \"USER\",\n    \"enabled\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Test Hibernate entity persistence by creating a new user. Check logs for Hibernate INSERT SQL: 'insert into user (created_at, email, enabled, first_name...) values (?, ?, ?, ?...)'"
					},
					"response": []
				},
				{
					"name": "Test Hibernate Entity Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Hibernate updated entity', function () {",
									"    pm.response.to.be.json;",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.firstName).to.equal('Hibernate Updated');",
									"    pm.expect(jsonData.lastName).to.equal('Test Updated');",
									"});",
									"",
									"console.log('üóÑÔ∏è Hibernate Test: Check logs for UPDATE statement generated by Hibernate');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Hibernate Updated\",\n    \"lastName\": \"Test Updated\",\n    \"email\": \"hibernate.updated@example.com\",\n    \"role\": \"MANAGER\",\n    \"enabled\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{hibernate_test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{hibernate_test_user_id}}"
							]
						},
						"description": "Test Hibernate entity update. Uses the ID from the previous create request. Check logs for Hibernate UPDATE SQL: 'update user set email=?, enabled=?, first_name=?... where id=?'"
					},
					"response": []
				},
				{
					"name": "Test Hibernate Custom Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Hibernate custom query executed', function () {",
									"    pm.response.to.be.json;",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    // Should find users with 'Hibernate' in the name",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0].firstName).to.include('Hibernate');",
									"    }",
									"});",
									"",
									"console.log('üóÑÔ∏è Hibernate Test: Check logs for custom query with LIKE operator generated by Hibernate');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/search?name=Hibernate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"search"
							],
							"query": [
								{
									"key": "name",
									"value": "Hibernate"
								}
							]
						},
						"description": "Test Hibernate custom query method. This uses Spring Data JPA method naming convention which Hibernate translates to SQL with LIKE operator: 'select ... where (user0_.first_name like ? or user0_.last_name like ?)'"
					},
					"response": []
				},
				{
					"name": "Test Hibernate Lazy Loading",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Hibernate entity loaded with relationships', function () {",
									"    pm.response.to.be.json;",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('firstName');",
									"    pm.expect(jsonData).to.have.property('role');",
									"    pm.expect(jsonData).to.have.property('createdAt');",
									"});",
									"",
									"console.log('üóÑÔ∏è Hibernate Test: Check logs for SELECT statement with JOIN if relationships exist');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"1"
							]
						},
						"description": "Test Hibernate lazy loading by fetching a single entity. Check logs for Hibernate SELECT with specific WHERE clause: 'select user0_.id as id1_0_0_, user0_.email as email2_0_0_... where user0_.id=?'"
					},
					"response": []
				},
				{
					"name": "Test Hibernate Transaction Rollback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400 (validation error)', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Hibernate transaction rolled back', function () {",
									"    pm.response.to.be.json;",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"console.log('üóÑÔ∏è Hibernate Test: Check logs for transaction rollback due to validation error');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"\",\n    \"lastName\": \"\",\n    \"email\": \"invalid-email\",\n    \"password\": \"123\",\n    \"role\": \"INVALID_ROLE\",\n    \"enabled\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Test Hibernate transaction management by sending invalid data. Hibernate should rollback the transaction and not persist invalid data. Check logs for rollback messages."
					},
					"response": []
				},
				{
					"name": "Cleanup - Delete Hibernate Test User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cleanup successful', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"console.log('üóÑÔ∏è Hibernate Test: Check logs for DELETE statement generated by Hibernate');",
									"",
									"// Clear the test user ID",
									"pm.globals.unset('hibernate_test_user_id');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/{{hibernate_test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{hibernate_test_user_id}}"
							]
						},
						"description": "Cleanup the test user created during Hibernate testing. Check logs for Hibernate DELETE SQL: 'delete from user where id=?'"
					},
					"response": []
				}
			],
			"description": "Test Hibernate ORM functionality including SQL generation, entity persistence, custom queries, lazy loading, and transaction management. Check application logs to see Hibernate-generated SQL statements."
		},
		{
			"name": "üì® Kafka Integration Testing",
			"item": [
				{
					"name": "Kafka Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Kafka is healthy', function () {",
									"    pm.response.to.be.json;",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.equal('HEALTHY');",
									"    pm.expect(jsonData.producer).to.equal('ACTIVE');",
									"    pm.expect(jsonData.consumer).to.equal('ACTIVE');",
									"});",
									"",
									"console.log('üì® Kafka Health Check: Kafka integration is working');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/kafka/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"kafka",
								"health"
							]
						},
						"description": "Check if Kafka integration is working properly"
					},
					"response": []
				},
				{
					"name": "Send User Event to Kafka",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User event sent successfully', function () {",
									"    pm.response.to.be.json;",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.equal('SENT');",
									"    pm.expect(jsonData.topic).to.equal('user-events');",
									"});",
									"",
									"console.log('üì® Kafka Test: Check application logs for Kafka producer messages');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventType\": \"USER_LOGIN\",\n    \"userId\": \"123\",\n    \"userDetails\": \"User logged in from Postman test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/kafka/user-event",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"kafka",
								"user-event"
							]
						},
						"description": "Send a user event message to Kafka. Check application logs to see Kafka producer and consumer messages."
					},
					"response": []
				},
				{
					"name": "Send Notification to Kafka",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Notification sent successfully', function () {",
									"    pm.response.to.be.json;",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.equal('SENT');",
									"    pm.expect(jsonData.topic).to.equal('notifications');",
									"});",
									"",
									"console.log('üì® Kafka Test: Check application logs for notification processing');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"recipient\": \"test@example.com\",\n    \"subject\": \"Kafka Test Notification\",\n    \"content\": \"This is a test notification sent via Kafka from Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/kafka/notification",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"kafka",
								"notification"
							]
						},
						"description": "Send a notification message to Kafka. Check application logs to see message processing."
					},
					"response": []
				},
				{
					"name": "Send Custom Message to Kafka",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Custom message sent successfully', function () {",
									"    pm.response.to.be.json;",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.equal('SENT');",
									"});",
									"",
									"console.log('üì® Kafka Test: Custom message sent to specified topic');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"topic\": \"user-events\",\n    \"key\": \"custom-test\",\n    \"message\": \"This is a custom test message from Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/kafka/custom-message",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"kafka",
								"custom-message"
							]
						},
						"description": "Send a custom message to any Kafka topic. Admin access required."
					},
					"response": []
				},
				{
					"name": "Get Consumed User Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User events retrieved', function () {",
									"    pm.response.to.be.json;",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('events');",
									"    pm.expect(jsonData).to.have.property('count');",
									"});",
									"",
									"console.log('üì® Kafka Test: Retrieved consumed user events from Kafka consumer');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/kafka/consumed/user-events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"kafka",
								"consumed",
								"user-events"
							]
						},
						"description": "Get all user events that have been consumed by the Kafka consumer. Run this after sending user events."
					},
					"response": []
				},
				{
					"name": "Get Consumed Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Notifications retrieved', function () {",
									"    pm.response.to.be.json;",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('notifications');",
									"    pm.expect(jsonData).to.have.property('count');",
									"});",
									"",
									"console.log('üì® Kafka Test: Retrieved consumed notifications from Kafka consumer');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/kafka/consumed/notifications",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"kafka",
								"consumed",
								"notifications"
							]
						},
						"description": "Get all notifications that have been consumed by the Kafka consumer. Run this after sending notifications."
					},
					"response": []
				},
				{
					"name": "Test User Creation with Kafka Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('User created successfully', function () {",
									"    pm.response.to.be.json;",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.firstName).to.equal('Kafka');",
									"});",
									"",
									"// Save user ID for cleanup",
									"if (pm.response.code === 201) {",
									"    const user = pm.response.json();",
									"    pm.globals.set('kafka_test_user_id', user.id);",
									"}",
									"",
									"console.log('üì® Kafka Test: User created - check logs for Kafka events (USER_CREATED and welcome notification)');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Kafka\",\n    \"lastName\": \"Test\",\n    \"email\": \"kafka.test@example.com\",\n    \"password\": \"kafka123\",\n    \"role\": \"USER\",\n    \"enabled\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Create a user and automatically trigger Kafka events. Check logs for USER_CREATED event and welcome notification."
					},
					"response": []
				},
				{
					"name": "Clear Consumed Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Messages cleared successfully', function () {",
									"    pm.response.to.be.json;",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.equal('CLEARED');",
									"});",
									"",
									"console.log('üì® Kafka Test: All consumed messages cleared');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/kafka/consumed/clear",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"kafka",
								"consumed",
								"clear"
							]
						},
						"description": "Clear all consumed messages from memory. Admin access required."
					},
					"response": []
				},
				{
					"name": "Cleanup - Delete Kafka Test User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cleanup successful', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"console.log('üì® Kafka Test: User deleted - check logs for USER_DELETED event');",
									"",
									"// Clear the test user ID",
									"pm.globals.unset('kafka_test_user_id');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/{{kafka_test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{kafka_test_user_id}}"
							]
						},
						"description": "Cleanup the test user created during Kafka testing. Check logs for USER_DELETED event."
					},
					"response": []
				}
			],
			"description": "Test Kafka integration including message production, consumption, and event-driven architecture. Check application logs to see Kafka producer and consumer messages."
		},
		{
			"name": "üè• Health & Monitoring",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/actuator/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actuator",
								"health"
							]
						},
						"description": "Application health check"
					},
					"response": []
				},
				{
					"name": "Application Info",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/actuator/info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actuator",
								"info"
							]
						},
						"description": "Application information"
					},
					"response": []
				},
				{
					"name": "All Actuator Endpoints",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/actuator",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actuator"
							]
						},
						"description": "List all available actuator endpoints"
					},
					"response": []
				}
			],
			"description": "Health and monitoring endpoints"
		},
		{
			"name": "üåê Web Pages (HTML)",
			"item": [
				{
					"name": "Home Page",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Application home page"
					},
					"response": []
				},
				{
					"name": "Login Page",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						},
						"description": "Login page (returns HTML)"
					},
					"response": []
				},
				{
					"name": "H2 Database Console",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/h2-console",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"h2-console"
							]
						},
						"description": "H2 database console (if enabled)"
					},
					"response": []
				}
			],
			"description": "Web pages that return HTML"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set timestamp for requests",
					"pm.globals.set('timestamp', new Date().toISOString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to check response time",
					"pm.test('Response time is acceptable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Log response details for debugging",
					"console.log('Response Status:', pm.response.status);",
					"console.log('Response Time:', pm.response.responseTime + 'ms');",
					"console.log('Content-Type:', pm.response.headers.get('Content-Type'));"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"description": "Base URL for the application"
		},
		{
			"key": "username",
			"value": "admin@example.com",
			"description": "Default admin username"
		},
		{
			"key": "password",
			"value": "admin123",
			"description": "Default admin password"
		}
	]
}
